name: Deploy to PyPI

on:
  push:
    branches:
      - main

permissions:
  contents: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Get current version
        id: current_version
        run: |
          # Use grep and sed to extract version from pyproject.toml (more reliable than Python parsing)
          CURRENT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Determine version bump type
        id: bump_type
        run: |
          # Get PR title from the merge commit message (first line)
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          PR_TITLE=$(echo "$COMMIT_MESSAGE" | head -n 1)

          echo "Commit Message: $COMMIT_MESSAGE"
          echo "PR Title: $PR_TITLE"

          # Check for version bump indicators in PR title
          if echo "$PR_TITLE" | grep -i -E "(breaking|major|BREAKING CHANGE)" > /dev/null; then
            echo "bump_type=major" >> $GITHUB_OUTPUT
            echo "Detected: MAJOR version bump"
          elif echo "$PR_TITLE" | grep -i -E "(feat|feature|minor)" > /dev/null; then
            echo "bump_type=minor" >> $GITHUB_OUTPUT
            echo "Detected: MINOR version bump"
          else
            echo "bump_type=patch" >> $GITHUB_OUTPUT
            echo "Detected: PATCH version bump"
          fi

      - name: Bump version
        id: new_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
          BUMP_TYPE="${{ steps.bump_type.outputs.bump_type }}"

          # Parse current version
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          # Bump version based on type
          case $BUMP_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

          # Update pyproject.toml using sed (compatible with both Linux and macOS)
          if [[ "$OSTYPE" == "darwin"* ]]; then
            sed -i '' "s/version = \"[^\"]*\"/version = \"$NEW_VERSION\"/" pyproject.toml
          else
            sed -i "s/version = \"[^\"]*\"/version = \"$NEW_VERSION\"/" pyproject.toml
          fi

      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit version bump
        run: |
          git add pyproject.toml
          git commit -m "chore: bump version to ${{ steps.new_version.outputs.new_version }}"
          git push origin main

      - name: Create and push tag
        run: |
          git tag -a "v${{ steps.new_version.outputs.new_version }}" -m "Release v${{ steps.new_version.outputs.new_version }}"
          git push origin "v${{ steps.new_version.outputs.new_version }}"

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_KEY }}
          verbose: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.new_version.outputs.new_version }}
          name: Release v${{ steps.new_version.outputs.new_version }}
          body: |
            ## ðŸš€ Release v${{ steps.new_version.outputs.new_version }}

            **Automated release from commit ${{ github.sha }}**

            ### Changes
            ${{ github.event.head_commit.message }}

            ### Version Bump
            - **Previous version:** ${{ steps.current_version.outputs.current_version }}
            - **New version:** ${{ steps.new_version.outputs.new_version }}
            - **Bump type:** ${{ steps.bump_type.outputs.bump_type }}

            ### Links
            - **PyPI Package:** https://pypi.org/project/ds-event-stream-python-sdk/${{ steps.new_version.outputs.new_version }}/
            - **Documentation:** https://grasp-labs.github.io/ds-event-stream-py-sdk/
            - **Commit:** ${{ github.sha }}

            ### Installation
            ```bash
            pip install ds-event-stream-python-sdk==${{ steps.new_version.outputs.new_version }}
            ```
          draft: false
          prerelease: false
          files: dist/*
          generate_release_notes: true
