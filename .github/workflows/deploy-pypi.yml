name: Deploy to PyPI

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

permissions:
  contents: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Bump version
        id: new_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
          BUMP_TYPE="${{ github.event.inputs.version_bump }}"

          echo "Bumping version: $CURRENT_VERSION ($BUMP_TYPE)"

          # Parse current version
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          # Bump version based on type
          case $BUMP_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Version bump: $CURRENT_VERSION -> $NEW_VERSION ($BUMP_TYPE)"

          # Update pyproject.toml with new version
          sed -i "s/version = \"[^\"]*\"/version = \"$NEW_VERSION\"/" pyproject.toml

          # Verify the change
          echo "Updated pyproject.toml:"
          grep "version = " pyproject.toml

      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit version bump
        run: |
          git add pyproject.toml
          git commit -m "chore: bump version to ${{ steps.new_version.outputs.new_version }}"
          git push origin main

      - name: Create and push tag
        run: |
          git tag "v${{ steps.new_version.outputs.new_version }}"
          git push origin "v${{ steps.new_version.outputs.new_version }}"

      - name: Build package
        run: |
          python -m build
          echo "Package built successfully"
          ls -la dist/

      - name: Check package
        run: |
          twine check dist/*
          echo "Package validation passed"

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_KEY }}
          verbose: true

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.new_version.outputs.new_version }}
          release_name: Release v${{ steps.new_version.outputs.new_version }}
          body: |
            ## ðŸš€ Release v${{ steps.new_version.outputs.new_version }}

            **Automated deployment to PyPI**

            ### Version Bump
            - **Previous version:** ${{ steps.current_version.outputs.current_version }}
            - **New version:** ${{ steps.new_version.outputs.new_version }}
            - **Bump type:** ${{ github.event.inputs.version_bump }}

            ### Links
            - **PyPI Package:** https://pypi.org/project/ds-event-stream-python-sdk/${{ steps.new_version.outputs.new_version }}/
            - **Documentation:** https://grasp-labs.github.io/ds-event-stream-py-sdk/

            ### Installation
            ```bash
            pip install ds-event-stream-python-sdk==${{ steps.new_version.outputs.new_version }}
            ```
          draft: false
          prerelease: false
