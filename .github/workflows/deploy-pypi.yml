name: Deploy to PyPI

on:
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Deploying version: $CURRENT_VERSION"

      - name: Prepare release info
        id: release_info
        run: |
          echo "version=${{ steps.current_version.outputs.current_version }}" >> $GITHUB_OUTPUT
          echo "tag_name=v${{ steps.current_version.outputs.current_version }}" >> $GITHUB_OUTPUT
          echo "Preparing release for version ${{ steps.current_version.outputs.current_version }}"

      - name: Build package
        run: |
          python -m build
          echo "Package built successfully"
          ls -la dist/

      - name: Check package
        run: |
          twine check dist/*
          echo "Package validation passed"

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_KEY }}
          verbose: true

      - name: Create GitHub Release
        uses: actions/github-script@v7
        with:
          script: |
            // First create the tag
            try {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'refs/tags/${{ steps.release_info.outputs.tag_name }}',
                sha: context.sha
              });
              console.log('Tag created: ${{ steps.release_info.outputs.tag_name }}');
            } catch (error) {
              if (error.status === 422) {
                console.log('Tag already exists: ${{ steps.release_info.outputs.tag_name }}');
              } else {
                throw error;
              }
            }

            // Then create the release
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ steps.release_info.outputs.tag_name }}',
              name: 'Release ${{ steps.release_info.outputs.tag_name }}',
              body: `## ðŸš€ Release ${{ steps.release_info.outputs.tag_name }}

            **Automated deployment to PyPI**

            ### Package Information
            - **Version:** ${{ steps.current_version.outputs.current_version }}
            - **Deployed from:** \`main\` branch
            - **Commit:** ${{ github.sha }}

            ### Links
            - **PyPI Package:** https://pypi.org/project/ds-event-stream-python-sdk/${{ steps.current_version.outputs.current_version }}/
            - **Documentation:** https://grasp-labs.github.io/ds-event-stream-py-sdk/

            ### Installation
            \`\`\`bash
            pip install ds-event-stream-python-sdk==${{ steps.current_version.outputs.current_version }}
            \`\`\``,
              draft: false,
              prerelease: false
            });
            console.log('Release created:', release.html_url);
