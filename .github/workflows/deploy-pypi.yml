name: Deploy to PyPI

on:
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Deploying version: $CURRENT_VERSION"

      - name: Create and push tag
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          TAG_NAME="v${{ steps.current_version.outputs.current_version }}"

          # Check if tag already exists locally and delete it
          if git tag -l | grep -q "^${TAG_NAME}$"; then
            echo "Tag ${TAG_NAME} already exists locally, deleting it"
            git tag -d "${TAG_NAME}"
          fi

          # Check if tag exists on remote and delete it
          if git ls-remote --tags origin | grep -q "refs/tags/${TAG_NAME}$"; then
            echo "Tag ${TAG_NAME} already exists on remote, deleting it"
            git push origin ":refs/tags/${TAG_NAME}" || echo "Failed to delete remote tag, continuing..."
          fi

          # Create and push new tag
          git tag "${TAG_NAME}"
          git push origin "${TAG_NAME}"

      - name: Build package
        run: |
          python -m build
          echo "Package built successfully"
          ls -la dist/

      - name: Check package
        run: |
          twine check dist/*
          echo "Package validation passed"

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_KEY }}
          verbose: true

      - name: Create GitHub Release
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: 'v${{ steps.current_version.outputs.current_version }}',
              name: 'Release v${{ steps.current_version.outputs.current_version }}',
              body: `## ðŸš€ Release v${{ steps.current_version.outputs.current_version }}

            **Automated deployment to PyPI**

            ### Package Information
            - **Version:** ${{ steps.current_version.outputs.current_version }}
            - **Deployed from:** \`main\` branch
            - **Commit:** ${{ github.sha }}

            ### Links
            - **PyPI Package:** https://pypi.org/project/ds-event-stream-python-sdk/${{ steps.current_version.outputs.current_version }}/
            - **Documentation:** https://grasp-labs.github.io/ds-event-stream-py-sdk/

            ### Installation
            \`\`\`bash
            pip install ds-event-stream-python-sdk==${{ steps.current_version.outputs.current_version }}
            \`\`\``,
              draft: false,
              prerelease: false
            });
            console.log('Release created:', release.html_url);
