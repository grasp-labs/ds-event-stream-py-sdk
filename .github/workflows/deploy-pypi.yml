name: Deploy to PyPI

on:
  workflow_dispatch:
    inputs:
      create_tag:
        description: 'Create git tag (only if you have permissions)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Deploying version: $CURRENT_VERSION"

      - name: Prepare release info
        id: release_info
        run: |
          echo "version=${{ steps.current_version.outputs.current_version }}" >> $GITHUB_OUTPUT
          echo "tag_name=v${{ steps.current_version.outputs.current_version }}" >> $GITHUB_OUTPUT
          echo "Preparing release for version ${{ steps.current_version.outputs.current_version }}"

      - name: Build package
        run: |
          python -m build
          echo "Package built successfully"
          ls -la dist/

      - name: Check package
        run: |
          twine check dist/*
          echo "Package validation passed"

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_KEY }}
          verbose: true

      - name: Create GitHub Release
        uses: actions/github-script@v7
        with:
          script: |
            const tagName = '${{ steps.release_info.outputs.tag_name }}';
            const version = '${{ steps.current_version.outputs.current_version }}';

            // Only create tag if requested and we have permissions
            if ('${{ github.event.inputs.create_tag }}' === 'true') {
              try {
                await github.rest.git.createRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `refs/tags/${tagName}`,
                  sha: context.sha
                });
                console.log(`Tag created: ${tagName}`);
              } catch (error) {
                if (error.status === 422) {
                  console.log(`Tag already exists: ${tagName}`);
                } else {
                  console.log(`Failed to create tag: ${error.message}`);
                  console.log('Continuing without tag creation...');
                }
              }
            } else {
              console.log('Tag creation skipped (create_tag=false or no permissions)');
            }

            // Check if tag exists before creating release
            let tagExists = false;
            try {
              await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${tagName}`
              });
              tagExists = true;
              console.log(`Tag ${tagName} exists, creating release...`);
            } catch (error) {
              console.log(`Tag ${tagName} does not exist, creating release without tag...`);
            }

            // Create the release (with or without tag)
            const releaseData = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: `Release ${tagName}`,
              body: `## ðŸš€ Release ${tagName}

            **Automated deployment to PyPI**

            ### Package Information
            - **Version:** ${version}
            - **Deployed from:** \`main\` branch
            - **Commit:** ${{ github.sha }}

            ### Links
            - **PyPI Package:** https://pypi.org/project/ds-event-stream-python-sdk/${version}/
            - **Documentation:** https://grasp-labs.github.io/ds-event-stream-py-sdk/

            ### Installation
            \`\`\`bash
            pip install ds-event-stream-python-sdk==${version}
            \`\`\``,
              draft: false,
              prerelease: false
            };

            // Only add tag_name if tag exists
            if (tagExists) {
              releaseData.tag_name = tagName;
            }

            const { data: release } = await github.rest.repos.createRelease(releaseData);
            console.log('Release created:', release.html_url);
